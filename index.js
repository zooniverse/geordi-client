// Generated by CoffeeScript 1.10.0
(function() {
  var GeordiClient, ZooUserStringGetter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('es6-promise').polyfill();

  ZooUserStringGetter = require('zooniverse-user-string-getter');

  module.exports = GeordiClient = (function() {
    GeordiClient.prototype.GEORDI_SERVER_URL = {
      staging: 'https://geordi.staging.zooniverse.org/api/events/',
      production: 'https://geordi.zooniverse.org/api/events/'
    };

    GeordiClient.prototype.GEORDI_DATABASE_FIELDS = ["userID", "subjectID", "relatedID", "errorCode", "errorDescription", "projectToken", "serverURL", "experiment", "cohort", "type", "userSeq", "sessionNumber", "eventNumber", "userAgent", "clientIP"];

    GeordiClient.prototype.gettingCohort = false;

    GeordiClient.prototype.env = 'staging';

    GeordiClient.prototype.projectToken = 'unspecified';

    GeordiClient.prototype.subjectGetter = function() {
      return "(N/A)";
    };

    GeordiClient.prototype.zooUserIDGetter = function() {
      return null;
    };

    GeordiClient.prototype.zooUserIDGetterParameter = null;

    function GeordiClient(config) {
      if (config == null) {
        config = {};
      }
      this.logEvent = bind(this.logEvent, this);
      this.update(config);
      this.UserStringGetter = new ZooUserStringGetter(this.zooUserIDGetter, this.zooUserIDGetterParameter);
    }

    GeordiClient.prototype.update = function(config) {
      var property, results, value;
      if (config == null) {
        config = {};
      }
      results = [];
      for (property in config) {
        value = config[property];
        results.push(this[property] = value);
      }
      return results;
    };


    /*
    log event with Google Analytics
     */

    GeordiClient.prototype._logToGoogle = function(eventData) {
      if (typeof dataLayer !== "undefined" && dataLayer !== null) {
        return dataLayer.push({
          event: "gaTriggerEvent",
          project_token: eventData['projectToken'],
          user_id: eventData['userID'],
          subject_id: eventData['subjectID'],
          geordi_event_type: eventData['type'],
          classification_id: eventData['relatedID']
        });
      } else {
        throw new Error("Warning: Google Tag Manager script not found - Geordi is not logging to Google Analytics.");
      }
    };


    /*
    log event with Geordi v2.1
     */

    GeordiClient.prototype._logToGeordi = function(eventData) {
      var request;
      request = new XMLHttpRequest();
      request.open("POST", this.GEORDI_SERVER_URL[this.env]);
      request.setRequestHeader("Content-Type", "application/json; charset=utf-8");
      return request.send(JSON.stringify(eventData));
    };


    /*
    add the user's details to the event data
     */

    GeordiClient.prototype._addUserDetailsToEventData = function(eventData) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if ((!_this.UserStringGetter.currentUserID) || (_this.UserStringGetter.currentUserID === _this.UserStringGetter.ANONYMOUS)) {
            return _this.UserStringGetter.getUserID().then(function(data) {
              if (data != null) {
                if (data !== _this.UserStringGetter.currentUserID) {
                  _this.UserStringGetter.currentUserID = data;
                }
              }
              return _this.UserStringGetter.currentUserID;
            }).then(function(userID) {
              eventData['userID'] = userID;
              return resolve(eventData);
            });
          } else {
            eventData['userID'] = _this.UserStringGetter.currentUserID;
            return resolve(eventData);
          }
        };
      })(this));
    };

    GeordiClient.prototype._addCohortToEventData = function(eventData) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.experimentServerClient.getCohort().then(function(cohort) {
            if (cohort != null) {
              eventData['cohort'] = cohort;
              return _this.experimentServerClient.currentCohort = cohort;
            }
          }).then(function() {
            return resolve(eventData);
          });
        };
      })(this));
    };

    GeordiClient.prototype._buildEventData = function(eventData) {
      if (eventData == null) {
        eventData = {};
      }
      eventData['browserTime'] = Date.now();
      eventData['projectToken'] = this.projectToken;
      eventData['errorCode'] = "";
      eventData['errorDescription'] = "";
      if (this.experimentServerClient != null) {
        eventData['experiment'] = this.experimentServerClient.ACTIVE_EXPERIMENT;
        if (this.experimentServerClient.currentCohort != null) {
          eventData['cohort'] = this.experimentServerClient.currentCohort;
        }
      }
      if (this.UserStringGetter.currentUserID != null) {
        eventData['userID'] = this.UserStringGetter.currentUserID;
      } else {
        eventData['userID'] = this.UserStringGetter.ANONYMOUS;
      }
      return eventData;
    };

    GeordiClient.prototype._updateEventDataFromParameterObject = function(parameterObject, eventData) {
      var field, i, k, len, newData, ref, v;
      if (eventData == null) {
        eventData = {};
      }
      ref = this.GEORDI_DATABASE_FIELDS;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if ((parameterObject[field] != null) && typeof parameterObject[field] === "string" && parameterObject[field].length > 0) {
          eventData[field] = parameterObject[field];
        }
      }
      if ("data" in parameterObject) {
        if (typeof parameterObject["data"] === "string") {
          newData = JSON.parse(parameterObject["data"]);
        } else {
          newData = parameterObject["data"];
        }
        if (eventData["data"] != null) {
          if (typeof eventData["data"] === "string") {
            eventData["data"] = JSON.parse(eventData["data"]);
          }
          for (k in newData) {
            v = newData[k];
            eventData["data"][k] = v;
          }
        } else {
          eventData["data"] = newData;
        }
        eventData["data"] = JSON.stringify(eventData["data"]);
      }
      if ("browserTime" in parameterObject && typeof parameterObject["browserTime"] === "number" && parameterObject["browserTime"] > 1441062000000) {
        eventData["browserTime"] = parameterObject["browserTime"];
      }
      return eventData;
    };


    /*
    This will log a user interaction both in the Geordi
    analytics API and in Google Analytics.
     */

    GeordiClient.prototype.logEvent = function(parameter) {
      var eventData;
      eventData = this._buildEventData();
      if (typeof parameter === "string") {
        eventData["type"] = parameter;
      } else if (typeof parameter === "object") {
        if (!("type" in parameter && typeof parameter.type === "string" && parameter.type.length > 0)) {
          eventData["errorCode"] = "GCP01";
          eventData["errorDescription"] = "missing 'type' when calling logEvent in Geordi client";
          eventData["type"] = "error";
        } else {
          eventData = this._updateEventDataFromParameterObject(parameter, eventData);
        }
        if (!("subjectID" in eventData && typeof parameter.subjectID === "string" && parameter.subjectID.length > 0)) {
          eventData["subjectID"] = this.subjectGetter();
        }
      } else {
        eventData["errorCode"] = "GCP02";
        eventData["errorDescription"] = "bad parameter passed to logEvent in Geordi Client";
        eventData["type"] = "error";
      }
      return this._addUserDetailsToEventData(eventData).then((function(_this) {
        return function(eventData) {
          if (eventData["userID"] == null) {
            eventData["userID"] = _this.UserStringGetter.ANONYMOUS;
          }
          if ((_this.experimentServerClient == null) || (!_this.experimentServerClient.shouldGetCohort(eventData["userID"]))) {
            _this._logToGeordi(eventData);
            return _this._logToGoogle(eventData);
          } else {
            if (!_this.gettingCohort) {
              _this.gettingCohort = true;
              return _this._addCohortToEventData(eventData).then(function(eventData) {
                _this._logToGeordi(eventData);
                _this._logToGoogle(eventData);
                return _this.gettingCohort = false;
              });
            } else {
              _this._logToGeordi(eventData);
              return _this._logToGoogle(eventData);
            }
          }
        };
      })(this));
    };

    return GeordiClient;

  })();

}).call(this);
